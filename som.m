% Solve a Clustering Problem with a Self-Organizing Map
% Script generated by Neural Clustering app
% Created 26-Oct-2020 07:06:05
%
clear; clc;

a = 270; b = 719;

load('data_mat.mat');
%load('pca_mat.mat');
%data_train = pca_mat(:, 1:38);
data_train = data_mat(:, 1:76);
x = data_train';
num_records = size(data_train, 1);   % 61784

% Create a Self-Organizing Map
net = selforgmap([3 3 2]);   % hextop
%net = selforgmap([3 3 2], 100, 3, 'gridtop');
num_categories = 3*3*2;

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
% net.plotFcns = {'plotsomnd', 'plotsomplanes', 'plotsomhits'};
net.plotFcns = {};
net.trainParam.epochs = 1000;
net.trainParam.show = NaN;

% Train the Network
[net, tr] = train(net, x);

% Test the Network
y = net(x);

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotsomtop(net)
%figure, plotsomnc(net)
% figure, plotsomnd(net)
% figure, plotsomplanes(net)
% figure, plotsomhits(net, x)
%figure, plotsompos(net,x)

cats = 2:1+num_categories;
I = ones(a, b);
centroids = net.IW{1, 1};
centers = zeros(1+num_categories, 2);

for i = 1:num_records
    cat = cats * y(:, i);
    %I(pca_mat(i, 39), pca_mat(i, 40)) = cat;
    %pca_mat(i, 41) = cat;
    I(data_mat(i, 77), data_mat(i, 78)) = cat;
    data_mat(i, 79) = cat;
end

for i = 2:1+num_categories
    subset = data_mat(data_mat(:, 79) == i, :);
    %subset = pca_mat(pca_mat(:, 41) == i, :);
    idx = knnsearch(subset(:, 1:76), centroids(i-1, :));
    %idx = knnsearch(subset(:, 1:38), centroids(i-1, :));
    centers(i, :) = subset(idx, 77:78);
    %centers(i, :) = subset(idx, 39:40);
end

res = struct('I', I, 'centroids', centers);
save('res.mat', 'res');